{"version":3,"sources":["file:///E:/Cases/TestFrameWork/assets/Script/Framework.ts"],"names":["cbBase","TestList","chaiType","f","target","propertyKey","descriptor","console","log","push","_decorator","Component","Button","JsonAsset","director","Client","ccclass","property","testPlugin","Framework","cbList","test1","test2","start","Instance","isInit","initWs","referList","startTest","t","name","_client","autoTestConfig","json","socketType","server","port","timeOut","length","websocket","onmessage","event","msg","JSON","parse","data","send","node","scene","slice","nextScene","loadScene"],"mappings":"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","sourcesContent":["\r\nimport { _decorator, Component, Node, Button, EventHandler, Label, game, JsonAsset, Scene, director, eventManager } from 'cc';\r\nimport { Client } from './Client';\r\nconst { ccclass, property } = _decorator;\r\n\r\nenum chaiType {\r\n    NONE = 0,\r\n    EXPECT,\r\n    SHOULD,\r\n}\r\ndeclare class AutoTestConfigJson extends JsonAsset {\r\n    json: {\r\n        isAutoTest: boolean,\r\n        server: string,\r\n        port: number,\r\n        socketType: string,\r\n        timeOut: number\r\n    }\r\n}\r\nexport function cbBase(TestList: Function[],chaiType: number = 0) {\r\n    var f: Function = (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\r\n\r\n        console.log(\"@Inject function to list\");\r\n\r\n    }\r\n\r\n    TestList.push(f);\r\n    return f;\r\n}\r\nexport class testPlugin{\r\n    \r\n    \r\n    //TODO: name of cblist\r\n    public static cbList: Function[] = [];\r\n    \r\n    \r\n    \r\n}\r\n\r\n\r\n\r\n@ccclass('Framework')\r\nexport class Framework extends Component {\r\n\r\n    static Instance: Framework;\r\n    public t: Function[] = testPlugin.cbList;\r\n\r\n    //UI components\r\n    @property(Button)\r\n    public toPrevScene: Button | null = null;\r\n    @property(Button)\r\n    public toNextScene: Button | null = null;\r\n\r\n    //Connect Properties\r\n    @property(JsonAsset)\r\n    public autoTestConfig: AutoTestConfigJson | null = null;\r\n    static isInit = false;\r\n\r\n    //static _client , could be injected automatically \r\n    static _client : Client;\r\n\r\n\r\n\r\n    @cbBase(testPlugin.cbList)\r\n    test1() {\r\n        console.log(\"@Running time alerts test 1\");\r\n    }\r\n    @cbBase(testPlugin.cbList)\r\n    test2() {\r\n        console.log(\"@Running time alerts test 2\");\r\n    }\r\n\r\n\r\n\r\n    start() {\r\n        if(!Framework.Instance){\r\n            Framework.Instance = this;\r\n        }\r\n\r\n        if(!Framework.isInit){\r\n            this.initWs();\r\n            \r\n        }\r\n\r\n        \r\n        //TODO: way to inject into new scene\r\n\r\n        //TODO: way to read events\r\n\r\n        //TODO: \r\n        this.referList();\r\n        this.startTest();\r\n    }\r\n    referList() {\r\n        console.log(\"@TL is\" + this.t[0].name);\r\n        debugger\r\n    }\r\n\r\n    public initWs(){\r\n        Framework._client = new Client(\r\n            this.autoTestConfig!.json.socketType,\r\n            this.autoTestConfig!.json.server,\r\n            this.autoTestConfig!.json.port,\r\n            this.autoTestConfig!.json.timeOut);\r\n    }\r\n\r\n    public startTest(){\r\n        while (this.t.length != 0){\r\n            \r\n            Framework._client.websocket.onmessage=(event)=>{\r\n                var msg : string = \"Undefined\"; \r\n                try{\r\n                    msg=JSON.parse(event.data);} catch{\r\n                        console.log(\"@Message is illegal, try using json format\");\r\n                    }\r\n                console.log(msg);\r\n            }\r\n            Framework._client.websocket.send(\"@Scene Node \"+this.node.scene.name+\"\"+this.t[0].name);\r\n            this.t[0];\r\n            this.t.slice(0,1);\r\n        }\r\n        console.log(\"Current Scene has finished all tests\");\r\n    }\r\n\r\n    public nextScene() {\r\n        director.loadScene(\"Demo_ui\", () => {\r\n            Framework._client?.websocket.send(\"@scene Changed\");\r\n        })\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]}